//
// Plot trends (using gnuplot) and a generate a map from a csv file generated by dumpfile.
//
package main

import (
        "fmt"
        "image/png"
        "os"
        "github.com/sbinet/go-gnuplot"
       )

// Wrapper
func createPlotter(persist bool, debug bool) (p* gnuplot.Plotter) {
	p, err := gnuplot.NewPlotter("", persist, debug)
	if err != nil {
		err_string := fmt.Sprintf("** err: %v\n", err)
		panic(err_string)
	}
	//defer p.Close()
        return p
}

// Wrapper function.
// We want to return a failure if the user has stopped gnuplot and
// we are trying to send another command.  (e.g. a broken pipe)
func sendCmd(p *gnuplot.Plotter, format string, a...interface{}) bool {
            err := p.Cmd(format, a...)
            if err != nil {
                return false
            } else {
                return true
            }
        }
func displayMapPlot(p *gnuplot.Plotter, filename string){
	p.CheckedCmd("set terminal wxt 2 size 1024,800")
        p.CheckedCmd("bind 's' 'unset terminal; exit gnuplot'")
        for ok := true; ok; {
            ok = ok && sendCmd(p, "unset xlabel")
            ok = ok && sendCmd(p, "unset ylabel")
            ok = ok && sendCmd(p, "unset xtics")
            ok = ok && sendCmd(p, "unset ytics")
            ok = ok && sendCmd(p, "plot '%s' binary filetype=png with rgbimage", filename)
            ok = ok && sendCmd(p, "pause 1")
            fmt.Println("running map", ok)
        }
        p.Close()
        return
        }

func genTrendPlot(p *gnuplot.Plotter, filename string){
	p.CheckedCmd("set terminal wxt 1 size 1024,800")
        // When the user hits the "s" key, sending further commands
        // will fail.  Use a bool to exit the loop and continue.
        p.CheckedCmd("bind 's' 'unset terminal; exit gnuplot'")  //stop
        p.CheckedCmd("bind 't' 'pause mouse any'")  //toggle update
        for ok := true; ok; {
            ok = ok && sendCmd(p, "set multiplot layout 3,1")
            ok = ok && sendCmd(p, "set border linewidth 1.5")
            ok = ok && sendCmd(p, "set datafile separator ','")
            ok = ok && sendCmd(p, "set style line 1 linecolor rgb '#0060ad' linetype 1 linewidth 0.5 pointtype 7 pointsize 0.5")
            ok = ok && sendCmd(p, "set style line 2 linecolor rgb '#dd181f' linetype 1 linewidth 0.5 pointtype 7 pointsize 0.5")
            ok = ok && sendCmd(p, "set style line 3 linecolor rgb '#5416b4' linetype 1 linewidth 0.5 pointtype 7 pointsize 0.5")
            ok = ok && sendCmd(p, "set grid")
            ok = ok && sendCmd(p, "unset key")
            ok = ok && sendCmd(p, "set title 'Pace'")
            ok = ok && sendCmd(p, "set ylabel 'Pace, min/km'")
            ok = ok && sendCmd(p, "set ydata time")
            ok = ok && sendCmd(p, "unset xlabel")
            ok = ok && sendCmd(p, "set timefmt %s", "'%M:%S'")
            ok = ok && sendCmd(p, "set yrange [*:*] reverse")
            ok = ok && sendCmd(p, "plot '%s' using 1:3  with linespoints linestyle 1", filename)
            ok = ok && sendCmd(p, "unset key")
            ok = ok && sendCmd(p, "unset ydata")
            ok = ok && sendCmd(p, "unset timefmt")
            ok = ok && sendCmd(p, "unset yrange")
            ok = ok && sendCmd(p, "set title 'Cadence'")
            ok = ok && sendCmd(p, "set ylabel 'Strides/min'")
            ok = ok && sendCmd(p, "unset xlabel")
            ok = ok && sendCmd(p, "plot '%s' using 1:7  with linespoints linestyle 2", filename)
            ok = ok && sendCmd(p, "set title 'Altitude'")
            ok = ok && sendCmd(p, "set ylabel 'Altitude, m'")
            ok = ok && sendCmd(p, "set xlabel 'Distance, m'")
            ok = ok && sendCmd(p, "plot '%s' using 1:6  with linespoints linestyle 3", filename)
            ok = ok && sendCmd(p, "pause 2")
            fmt.Println("running trend", ok)
            }
        p.Close()
	return
        }

func main() {
        if len(os.Args) != 2 {
            fmt.Println("Usage:", os.Args[0], "filename")
            return
        }
        filename := os.Args[1]
        // Create the plotters
        // Create the trend plot
        go genTrendPlot(createPlotter(false,false), filename)
        // Create and display the map.
        img := mapimg(filename)
        f, _ := os.Create("image.png")
        png.Encode(f, img)
        go displayMapPlot(createPlotter(false,false), "image.png")
        //loop forever
        for ok:= true; ok; {
        }
        // os.Remove("image.png")

}

