//
// Plot trends (using gnuplot) and a generate a map from a csv file generated by dumpfile.
//
package main

import (
        "fmt"
        "image/png"
        "os"
        "github.com/sbinet/go-gnuplot"
       )

func displayMapPlot(filename string){
	fname := ""
	persist := true
	debug := false
	p, err := gnuplot.NewPlotter(fname, persist, debug)
	if err != nil {
		err_string := fmt.Sprintf("** err: %v\n", err)
		panic(err_string)
	}
	defer p.Close()
	p.CheckedCmd("set terminal wxt 2 size 1024,800")
        p.CheckedCmd("unset xlabel")
        p.CheckedCmd("unset ylabel")
        p.CheckedCmd("unset xtics")
        p.CheckedCmd("unset ytics")
        //p2.CheckedCmd("set size ratio -1")
        p.CheckedCmd("plot '%s' binary filetype=png with rgbimage", filename)
        p.CheckedCmd("pause 1")
        return
        }

func genTrendPlot(filename string){
	fname := ""
	persist := true
	debug := false
	p, err := gnuplot.NewPlotter(fname, persist, debug)
	if err != nil {
		err_string := fmt.Sprintf("** err: %v\n", err)
		panic(err_string)
	}
	defer p.Close()


	p.CheckedCmd("set terminal wxt size 1024,800")
        p.CheckedCmd("set multiplot layout 3,1")
        p.CheckedCmd("set border linewidth 1.5")
	p.CheckedCmd("set datafile separator ','")
        p.CheckedCmd("set style line 1 linecolor rgb '#0060ad' linetype 1 linewidth 0.5 pointtype 7 pointsize 0.5")
        p.CheckedCmd("set style line 2 linecolor rgb '#dd181f' linetype 1 linewidth 0.5 pointtype 7 pointsize 0.5")
        p.CheckedCmd("set style line 3 linecolor rgb '#5416b4' linetype 1 linewidth 0.5 pointtype 7 pointsize 0.5")
        p.CheckedCmd("set grid")
	p.CheckedCmd("unset key")
        p.CheckedCmd("set title 'Pace'")
        p.CheckedCmd("set ylabel 'Pace, min/km'")
        p.CheckedCmd("set ydata time")
        p.CheckedCmd("unset xlabel")
        p.CheckedCmd("set timefmt %s", "'%M:%S'")
        p.CheckedCmd("set yrange [*:*] reverse")
        p.CheckedCmd("plot '%s' using 1:3  with linespoints linestyle 1", filename)
        p.CheckedCmd("unset key")
        p.CheckedCmd("unset ydata")
        p.CheckedCmd("unset timefmt")
        p.CheckedCmd("unset yrange")
        p.CheckedCmd("set title 'Cadence'")
        p.CheckedCmd("set ylabel 'Strides/min'")
        p.CheckedCmd("unset xlabel")
        p.CheckedCmd("plot '%s' using 1:7  with linespoints linestyle 2", filename)
        p.CheckedCmd("set title 'Altitude'")
        p.CheckedCmd("set ylabel 'Altitude, m'")
        p.CheckedCmd("set xlabel 'Distance, m'")
        p.CheckedCmd("plot '%s' using 1:6  with linespoints linestyle 3", filename)

	//p.CheckedCmd("q")
	//p.proc.Wait(0)

	return
        }
func main() {
        if len(os.Args) != 2 {
            fmt.Println("Usage:", os.Args[0], "filename")
            return
        }
        filename := os.Args[1]
        // Create the trend plot
        genTrendPlot(filename)
        // Create and display the map.
        img := mapimg(filename)
        f, _ := os.Create("image.png")
        png.Encode(f, img)
        displayMapPlot("image.png")
        os.Remove("image.png")

}

